// // 210\. Объявите функцию `foo` со входящим параметром `a`. 
// Внутри неё объявите функцию `bar` со входящим параметром `b`. 
// Вызовите функцию `bar` внутри функции `foo`. Вызовите функцию `foo`. 
// Каков результат выполнения функции `bar`? Каков результат выполнения функции `foo`?

function foo(a){
	function bar(b){
	}
	bar();
}
foo();

/*результат foo будет undefined, потому что результат не определен
результат bar  тоже будет undefined*/

// // 212\. Объявите функцию `foo` со входящим параметром `a`.
// Внутри неё объявите функцию `bar` со входящим параметром `b`. 

// Функция `bar` должна удваивать поданное ей на вход значение. 
// Функция `foo` должна утраивать поданное ей на вход значение. 

// Вызовите `foo` со входящим значением `2`. 
// Каков результат выполнения функции `bar`? 
// Каков результат выполнения функции `foo`? 
// Какие параметры у функции `foo`? 
// Какие параметры у функции `bar`?

function foo(a){
	function bar(b){
		return b * 2
	}
	return a * 3;
}

foo(2);
// результат выполнения функции `bar` - undefined; параметры у функции `bar` - b
// результат выполнения функции `foo` - ; параметры у функции `foo` - a

// // 214\. Объявите функцию `foo` со входящим параметром `a`. 
// Внутри неё объявите функцию `bar` со входящим параметром `b`. 
// Функция `bar` должна удваивать поданное ей на вход значение. 
// Функция `foo` должна суммировать поданное ей на вход значение с результатом выполнения функции `bar`, 
// которой на вход передано значение `3`. Вызовите `foo` со входящим значением `4`. 
// Каков результат выполнения функции `bar`? Каков результат выполнения функции `foo`?

function foo(a){
	function bar(b){
		return b * 2
	}
	return a + bar(3);
}

foo(4);

// result bar = 6
// result foo = 10

// // 216\. 
// Объявите функцию `foo` со входящим параметром `a`. 
// Внутри неё объявите функцию `bar` со входящим параметром `b`. 
// Функция `bar` должна удваивать поданное ей на вход значение. 
// Функция `foo` должна суммировать поданное ей на вход значение с результатом выполнения функции `bar`, 
// которой на вход передано значение, до этого переданное на вход функции `foo`. 
// Вызовите `foo` со входящим значением `4`. Каков результат выполнения функции `bar`? 
// Каков результат выполнения функции `foo`? Какие аргументы у функции `foo`? 
// Какие аргументы у функции `bar`?

function foo(a){
	function bar(b){
		return b * 2;
	}
	return a + bar(a);
}

foo(4)

// bar = 8; argument = 4
// foo = 12; argument = 4

// // 218\. Объявите функцию `foo`. Внутри неё объявите анонимную функцию со входящим параметром. 
// Результатом выполнения `foo` должен быть результат выполнения анонимной функции. 
// Подайте на вход анонимной функции первый аргумент функции `foo`. 
// Анонимная функция должна отдавать поданное ей на вход значение без изменений. 
// Вызовите `foo` со входящим значением `10`. Каков результат выполнения функции `foo`? 
// Какие аргументы у функции `foo`? Какие аргументы у анонимной функции?

function foo(a){
	return (function (b){
		return b;
	})(a);
}

foo(10);

// result of foo = 10, argument is 10
// argument of anonim function is 10
