
// 122\. Объявите анонимную не стрелочную функцию, которая суммирует два входящих значения. 
// Где у данной функции параметры? Где аргументы?

function(x,y/*this is parameters*/){
	return x+y
}
// thre are no arguments, because we don't call this function

// 124\. Объявите анонимную самовызывающуюся стрелочную функцию, которая суммирует два входящих значения. 
// Передайте ей на вход `3` и `6`. Каков результат выполнения функции? Где у данной функции параметры? Где аргументы?

((a, b/*params*/)=> a + b)(3, 6/*arguments*/)
/*result 9*/

((a, b)=> a + b)(3, 6)

// 126\. Объявите функцию `foo` со входящим параметром `x`. Вызовите функцию со входящим значением `42`. 
// Каков результат выполнения функции? Где у данной функции параметры? Где аргументы? Чему равно `x`.

function foo(x/*params*/){}
foo(42/*arguments*/)
/*x=42*/
/*result is undefined*/

// 128\. Объявите функцию `foo` со входящим параметром `x`.  Вызовите функцию со входящими значениями `42` и `7`. 
// Сколько у функции параметров? А сколько аргументов? Чему равен `x`? Каков результат выполнения функции?

function foo(x){}
foo(42, 7)
// 1 parameter
// 2 arguments

// 130\. Объявите функцию `foo` со входящими параметрами `x`, `y`. Вызовите функцию со входящим значением `42`.
//  Сколько у функции параметров? А сколько аргументов? Чему равен `x`? Чему равен `y`? Каков результат выполнения функции?

function foo(x, y){}
foo(42)
// 2 параметра
// 1 аргумент
// x=42, y=undefined, result is undefined

// 132\. Объявите функцию `foo`, которая суммирует первые два значения, поданные ей на вход. 
// Вызовите `foo` со входящими значениями `1`, `2`, `3`. Сколько у функции параметров? А сколько аргументов? Каков результат выполнения функции?

function foo(x, y) {
	return x + y
}
foo(1, 2, 3)
// 2 parameters
// 3 arguments
// result 3