// // ## Замыкания

// // 300\. Объявите функцию `foo`. Внутри объявите переменную `x` со значением `42` и вложенную функцию `bar`. 
// Внутри функции `bar` объявите переменную `y`, которая удваивает значение переменной `x`. 
// Вызовите функцию `bar` внутри функции `foo`. Вызовите `foo`. Чему равно значение `y`? Почему?

function foo(){
	const x = 42;
	function bar(){
		const y = x * 2;
	}
	bar();
}

foo();

// // 302\. Объявите функцию `foo`. Внутри объявите переменную `x` со значением `42` и вложенную функцию `bar`. 
// Внутри функции `bar` объявите переменную `x` со значением `7`. Вызовите функцию `bar` внутри функции `foo`. 
// Функция `foo` должна возвращать `x`. Вызовите `foo`. Чему равно значение `x`? Почему?

function foo(){
	const x = 42;
	function bar(){
		const x = 7;
	}
	bar();
	return x;
}

foo();

// // 304\.
//  Объявите функцию `foo`. Внутри объявите переменную `x` со значением `42` и вложенную функцию `bar`. 
// Внутри функции `bar` объявите переменную `x` со значением `7`. Функция `foo` должна возвращать результат выполнения функции `bar`. 
// Внутри функции `bar` объявите функцию `baz`, которая возвращает `x`. Функция `bar` должнна возвращать результат выполнения функции `baz`. Вызовите `foo`. 
// Каков результат выполнения функции `foo`. Почему?

function foo() {
	const x = 42;
	return (function bar(){
		const x = 7;
		return (function baz(){
			return x;
		})
	})
}

foo();

function foo() {
	const x = 42;
	function bar(){
		const x = 7;
		function baz(){
			return x
		}
		return baz();
	}
	return bar();
}